apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

project.version = "0.10.2-SNAPSHOT"
def mainV = '0.11'
def impl8V = '0.11'
def core8V = '0.10'
def core11V = '0.10'
def extUtilV = '1.1'

version = "${project.version}"

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.encoding = 'UTF-8'
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html4', true)
    }
    options.encoding = 'UTF-8'
    options.destinationDirectory(new File("A:\\Workspaces\\CrystalShardDocumentation\\"))
}

jar {
    test
}

allprojects {
    group 'de.kaleidox'

    apply plugin: 'java-library'

    compileJava {
        options.encoding = 'UTF-8'
    }

    jar {
        if (!isTravis()) {
            archiveName = "CrystalShard-${project.name}.jar"
            destinationDir = new File("${project.rootProject.projectDir.absolutePath}\\artifacts")
        }
        classifier "sources-${project.name}".toLowerCase()
    }

    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.3'
        implementation 'com.vdurmont:emoji-java:4.0.0'
        implementation 'com.github.burdoto:KalUtils:b5ea2a7'
    }

    sourceSets {
        main {
            java {
                srcDirs = ["src\\main\\java"]
            }
            resources {
                srcDirs = ["src\\main\\resources"]
            }
        }
    }
}

project(":Main") {
    version = (mainV == null ? project.version : mainV)

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        testImplementation project(':Main')
        testRuntimeOnly project(':Internal-8')
        testRuntimeOnly project(':Core-8')
        testRuntimeOnly project(':Core-11')
        testRuntimeOnly project(':ExtensiveUtils')

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.reflections:reflections:0.9.11'
    }

    sourceSets {
        test {
            java {
                srcDirs = ["src\\test\\java"]
            }
            resources {
                srcDirs = ["src\\test\\resources"]
            }
        }
    }

    test {
        test.outputs.upToDateWhen { false }
    }
}

project(":ExtensiveUtils") {
    version = (extUtilV == null ? project.version : extUtilV)

    sourceCompatibility = 9
    targetCompatibility = 9

    dependencies {
        implementation project(':Main')
        implementation project(':Internal-8')

        implementation 'org.reflections:reflections:0.9.11'
    }
}

project(":Internal-8") {
    version = (impl8V == null ? project.version : impl8V)

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation project(":Main")
    }
}

project(":Core-8") {
    version = (core8V == null ? project.version : core8V)

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation project(":Main")
        implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    }
}

project(":Core-8") {
    version '0.9'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation project(":Main")
        implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    }
}

project(":Core-11") {
    version = (core11V == null ? project.version : core11V)

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        implementation project(":Main")

        testImplementation project(":Internal-8")
        testImplementation project(":ExtensiveUtils")
    }
}

if (!isTravis()) {
    apply from: 'gradle/publishing.gradle'
}

static boolean isTravis() {
    return System.getenv().containsKey("TRAVIS")
}